% -------------------------------------------------------------------------
% Project: Artificial Intelligence-Based Gearbox Fault Identification
% Model:   5 - 1D Convolutional Neural Network (CNN) Classifier
% Author:  [Your Names Here]
% Date:    October 21, 2025
% -------------------------------------------------------------------------
% NOTE: This model works directly on RAW TIME-SERIES data, not the 
%       previously extracted statistical features. This is an end-to-end
%       learning approach.
% -------------------------------------------------------------------------

%% 1. Workspace Setup
clear;         % Clear all variables from the workspace
clc;           % Clear the command window
close all;     % Close all open figures

disp('--- Starting Model 5: 1D Convolutional Neural Network (CNN) ---');

%% 2. Data Generation (Simulated Raw Signals)
% We now simulate raw time-series data instead of statistical features.

% Signal Parameters
fs = 2048;              % Sampling frequency (Hz)
t_total = 10;           % Total time for each class signal (seconds)
t = 0:1/fs:t_total-1/fs;% Time vector
N = length(t);          % Total number of samples per class

% Base signal (healthy)
amplitude_base = 0.5;
noise_level = 0.1;
healthy_signal = amplitude_base * sin(2*pi*60*t) + noise_level * randn(1, N);

% Faulty signal 1: Chipped Tooth (with periodic impacts)
impact_amplitude = 3;
impact_frequency = 10; % 10 impacts per second
impacts = zeros(1, N);
impact_indices = 1:fs/impact_frequency:N;
impacts(round(impact_indices)) = impact_amplitude;
chipped_signal = healthy_signal + impacts;
chipped_signal = chipped_signal + 0.2 * randn(1, N); % Add more noise

% Faulty signal 2: Misalignment (with harmonic distortion)
misaligned_signal = healthy_signal + 0.4*sin(2*pi*120*t) + 0.2*sin(2*pi*180*t);
misaligned_signal = misaligned_signal + 0.15 * randn(1, N);

% Plot a small segment of each signal to visualize
figure;
subplot(3,1,1); plot(t(1:fs), healthy_signal(1:fs)); title('Healthy Signal (1 sec)');
subplot(3,1,2); plot(t(1:fs), chipped_signal(1:fs)); title('Chipped Tooth Signal (1 sec)');
subplot(3,1,3); plot(t(1:fs), misaligned_signal(1:fs)); title('Misalignment Signal (1 sec)');
xlabel('Time (s)');

disp('Step 1: Simulated raw vibration signals generated.');

%% 3. Data Preparation for CNN
% We segment the raw signals into smaller windows. Each window is one sample.

segment_length = 1024; % Each input to the CNN will be 1024 samples long
num_segments_per_class = floor(N / segment_length);

% Pre-allocate cell arrays for data and labels
X_data = {};
Y_data = {};

% Segment the healthy signal
for i = 1:num_segments_per_class
    start_idx = (i-1)*segment_length + 1;
    end_idx = i*segment_length;
    X_data{end+1, 1} = healthy_signal(start_idx:end_idx);
    Y_data{end+1, 1} = 'Healthy';
end

% Segment the chipped tooth signal
for i = 1:num_segments_per_class
    start_idx = (i-1)*segment_length + 1;
    end_idx = i*segment_length;
    X_data{end+1, 1} = chipped_signal(start_idx:end_idx);
    Y_data{end+1, 1} = 'Chipped Tooth';
end

% Segment the misalignment signal
for i = 1:num_segments_per_class
    start_idx = (i-1)*segment_length + 1;
    end_idx = i*segment_length;
    X_data{end+1, 1} = misaligned_signal(start_idx:end_idx);
    Y_data{end+1, 1} = 'Misalignment';
end

Y_data = categorical(Y_data);
disp('Step 2: Signals segmented into windows for CNN input.');

%% 4. Data Partitioning (70% Train, 15% Validation, 15% Test)
num_total_segments = length(Y_data);
cv = cvpartition(num_total_segments, 'Holdout', 0.3);
idxTrain = training(cv);
idxTemp = test(cv);

X_train = X_data(idxTrain);
Y_train = Y_data(idxTrain);
X_temp = X_data(idxTemp);
Y_temp = Y_data(idxTemp);

cv_sub = cvpartition(length(Y_temp), 'Holdout', 0.5);
idxVal = training(cv_sub);
idxTest = test(cv_sub);

X_val = X_temp(idxVal);
Y_val = Y_temp(idxVal);
X_test = X_temp(idxTest);
Y_test = Y_temp(idxTest);

fprintf('Data partitioned:\n - Training samples: %d\n - Validation samples: %d\n - Testing samples: %d\n', ...
    length(Y_train), length(Y_val), length(Y_test));

%% 5. Define the 1D CNN Architecture
disp('Step 3: Defining the 1D CNN architecture...');

numClasses = 3;
layers = [
    sequenceInputLayer(segment_length, 'Name', 'input') % Input is a sequence

    convolution1dLayer(16, 64, 'Padding', 'same', 'Name', 'conv1')
    batchNormalizationLayer('Name', 'bn1')
    reluLayer('Name', 'relu1')
    maxPooling1dLayer(2, 'Stride', 2, 'Name', 'pool1')

    convolution1dLayer(32, 32, 'Padding', 'same', 'Name', 'conv2')
    batchNormalizationLayer('Name', 'bn2')
    reluLayer('Name', 'relu2')
    maxPooling1dLayer(2, 'Stride', 2, 'Name', 'pool2')
    
    convolution1dLayer(64, 16, 'Padding', 'same', 'Name', 'conv3')
    batchNormalizationLayer('Name', 'bn3')
    reluLayer('Name', 'relu3')

    globalAveragePooling1dLayer('Name', 'gapool')
    
    fullyConnectedLayer(numClasses, 'Name', 'fc_output')
    softmaxLayer('Name', 'softmax')
    classificationLayer('Name', 'classification')
];

analyzeNetwork(layers);

%% 6. Specify Training Options
disp('Step 4: Configuring training options...');

options = trainingOptions('adam', ...
    'InitialLearnRate', 0.001, ...
    'MaxEpochs', 30, ...
    'MiniBatchSize', 32, ...
    'Shuffle', 'every-epoch', ...
    'ValidationData', {X_val, Y_val}, ...
    'ValidationFrequency', 10, ...
    'Verbose', false, ...
    'Plots', 'training-progress');

%% 7. Train the CNN
disp('Step 5: Training the CNN model... (This may take a moment)');

[net, trainInfo] = trainNetwork(X_train, Y_train, layers, options);

disp('Model training complete.');

%% 8. Evaluate the Final Model on the Test Set
disp('Step 6: Evaluating the final model on the unseen test set...');

% Make predictions on the test data
Y_test_pred = classify(net, X_test);

% Calculate final test accuracy
testAccuracy = sum(Y_test_pred == Y_test) / numel(Y_test);

fprintf('\n--- MODEL EVALUATION COMPLETE ---\n');
fprintf('Final Test Accuracy: %.2f%%\n', testAccuracy * 100);

% Display the confusion matrix
figure;
confusionchart(Y_test, Y_test_pred);
title(sprintf('Confusion Matrix for 1D CNN (Test Accuracy: %.2f%%)', testAccuracy*100));

disp('--- End of Script ---');
